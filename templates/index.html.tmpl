<html>
<head>
	<title>Draw My Game</title>
	<script src="mysimplegame/mysimplegame-core.js"></script>
	<script src="mysimplegame/mysimplegame-dynamic.js"></script>
	<script src="mysimplegame/mysimplegame-collision.js"></script>
	<script src="mysimplegame/mysimplegame-mapper.js"></script>
	<script src="mysimplegame/mysimplegame-map-collision.js"></script>
	<style>
	body {
		padding: 0;
		margin: 0;
		height: 100%;
		display: flex;
		flex-direction: column;
	}

	/* HEADER */

	#header {
		text-align: center;
		font-size: 24px;
		font-family: "Brush Script MT", "Brush Script Std", cursive;
	}

	/* TABS */

	#tabs {
		display: flex;
		flex-direction: row;
		min-height: 50px;
	}
	.tab {
		flex: 1;
		height: 50px;
		/* border */
		border: 1px solid #555;
		border-bottom: 0;
		border-radius: 15px 15px 0px 0px;
		box-shadow: 5px -2px 6px rgba(0, 0, 0, 0.5);
		/* text */
		font-weight: bold;
		font-size: 30px;
		text-shadow: 1px 1px 0 rgba(200,200,200,0.6),
					-1px -1px 0 rgba(50,50,50,0.6);
	}
	#tab_draw {
		z-index: 1.1;
		background: linear-gradient(#7B7, #9E9 80%);
		color: #595;
	}
	#tab_play {
		z-index: 1.2;
		background: linear-gradient(#77B, #99E 80%);
		color: #559;
	}
	#tab_share {
		z-index: 1.3;
		background: linear-gradient(#B77, #E99 80%);
		color: #955;
	}
	.tab.selected {
		z-index: 2;
	}
	.tab:not(.selected) {
		border-bottom: 1px solid #555;
		cursor: pointer;
	}
	.tab:not(.selected):hover {
		webkit-filter: brightness(80%); /* Safari */
		filter: brightness(80%);
	}

	/* PAGES */

	.page {
		z-index: 3;
		padding: 30px;
		flex: 1;
		text-align: center;
	}
	#page_draw {
		background: linear-gradient(#9E9, white 200px);
	}
	#page_play {
		background: linear-gradient(#99E, white 200px);
	}
	#page_share {
		background: linear-gradient(#E99, white 200px);
		padding-left: 100px;
		padding-right: 100px;
	}

	/* BUTTONS */

	.buttons {
		margin: 10px;
	}

	.buttons button {
		height: 30px;
		min-width: 30px;
		margin: 1px;
		border: 1px solid black;
		border-radius: 5px;
		background: white;
		background-size: contain;
		background-repeat: no-repeat;
		background-position: center center;
		cursor: pointer;
	}

	.buttons button.selected {
		box-shadow: 0px 0px 5px 3px rgba(0, 0, 255, 0.5);
	}

	/* DRAW ELEMS */

	#page_draw .elem {
		position: absolute;
		background-size: contain;
		background-repeat: no-repeat;
		background-position: center center;
	}

	/* DRAW BUTTONS */

	#tab_draw_btns {
		border-spacing: 0;
	}

	#tab_draw_btns tr td:first-child {
		font-size: 14px;
		text-align: right;
	}

	/* OTHER */

	.url {
		font-size: 16px;
		font-weight: bold;
		width: 100%;
		min-height: 100px;
		resize: vertical;
	}
	.canvas canvas {
		box-shadow: 1px 1px 12px rgba(0, 0, 0, 0.5);
	}
	</style>
</head>
<body>
	<div id="header"><h1>Draw My Game</h1></div>
 	<div id="tabs">
		<button id="tab_draw" class="tab">Draw</button>
		<button id="tab_play" class="tab">Play</button>
		<button id="tab_share" class="tab">Share</button>
	</div> 
	<div id="page_draw" class="page">
		<div class="canvas" style="display:inline-block; position:relative"></div>
		<div class="buttons">
			<div><button id="btn_clear">Clear</button></div>
			<br/>
			<center><table id="tab_draw_btns">
				<tr><td>Walls:</td><td id="btns_draw_walls"></td><tr>
				<tr><td>Heroes:</td><td id="btns_draw_heroes"></td><tr>
				<tr><td>Enemies:</td><td id="btns_draw_enemies"></td><tr>
				<tr><td>Items:</td><td id="btns_draw_items"></td><tr>
				<tr><td>Tools:</td><td>
					<button id="btn_draw_rm" style="background-image:url('/img/scissors.png')"></button>
				</td></tr>
			</table></center>
		</div>
	</div>
	<div id="page_play" class="page">
		<div class="canvas"></div>
		<div class="buttons">
			<div><button id="btn_restart">Restart</button></div>
		</div>
	</div>
	<div id="page_share" class="page">
		<p>Copy this URL:</p>
		<textarea class="url"></textarea>
		<p>and send it to your friends, for them to play your game !</p>
	</div>
</body>
<script>
var libDir = "mysimplegame/lib"

var Elem = MSG.Elem

// default vals
var defWidth = 600
var defHeight = 400

// constants
var SOLID = "S" // TODO: rm
var WALL = 0
var WallsDesc = {
	void: { color: "white" },
	solid: { color: "black" }
}

var ELEM = 1
var ElemsDesc = {{{descs}}}

// global vars
var Ctx = {}

// main ///////////////////////////////

var main = function(){

	// tabs
	Q("#tab_draw").onclick = showDrawPage
	Q("#tab_play").onclick = showPlayPage
	Q("#tab_share").onclick = showSharePage

	// game buttons
	initDrawButtons()

	if(initCtxFromUrl()) showPlayPage()
	else showDrawPage()
}

// Context ///////////////////////////////

var clearCtx = function(){
	Ctx = {}
}

var initCtxFromUrl = function(){
	if(Ctx.initialised) return true
	Ctx.initialised = true

	// parse url
	var ctx = parseGameFromUrl()
	if(ctx===null) return false

	Object.assign(Ctx, ctx)

	return true
}

var initCtxFromDraw = function(){
	if(Ctx.initialised) return true
	Ctx.initialised = true

	initCtxFromDrawQuick()

	// map walls (slow)
	var drawCan = initDrawCan()
	Ctx.desc.walls = MSG.map(drawCan)

	initCtxUrlHash()

	return true
}

var initCtxFromDrawQuick = function(){
	if(Ctx.desc) return

	var drawCan = initDrawCan()

	var els = Qall("#page_draw .elem")
	var elems = []
	for(var el of els)
		elems.push({ key:el._key, x:el._x, y:el._y })

	Ctx.desc = {
		width: drawCan.width,
		height: drawCan.height,
		elems: elems
	}
}

var initCtxUrlHash = function(){
	initCtxFromDraw()
	if(!Ctx.urlHash) Ctx.urlHash = formatGame(Ctx.desc)
	window.location.hash = Ctx.urlHash
}

// Draw ///////////////////////////////
/*
var DrawButtonsDesc = [
	Object.keys(WallsDesc)
		.map( k => { return { type:WALL, key:k } }),
	Object.keys(ElemsDesc)
		.filter( k => ElemsDesc[k].teams[0]==="hero" )
		.map( k => { return { type:ELEM, key:k } }),
	Object.keys(ElemsDesc)
		.filter( k => ElemsDesc[k].teams[0]==="enemy" )
		.map( k => { return { type:ELEM, key:k } }),
	Object.keys(ElemsDesc)
		.filter( k => ElemsDesc[k].teams[0]==="item" )
		.map( k => { return { type:ELEM, key:k } })
]
*/
var initDrawButtons = function(){
	// clear button
	var clearBtn = Q("#btn_clear")
	clearBtn.onclick = clearDrawCan
	// walls buttons
	var wallBtnsTr = Q("#btns_draw_walls")
	for(var key in WallsDesc){
		var wallDesc = WallsDesc[key]
		var btn = document.createElement("button")
		btn.desc = { key:key, type:WALL }
		btn.title = key
		btn.style.background = wallDesc.color
		wallBtnsTr.appendChild(btn)
		btn.onclick = selectThisDrawButton
		// default selection
		if(key === "solid") selectDrawButton(btn)
	}
	// elems buttons
	var heroesBtnsTr = Q("#btns_draw_heroes"),
		enemiesBtnsTr = Q("#btns_draw_enemies"),
		itemsBtnsTr = Q("#btns_draw_items")
	for(var key in ElemsDesc){
		var elDesc = ElemsDesc[key]
		var btn = document.createElement("button")
		btn.desc = { key:key, type:ELEM }
		btn.title = elDesc.title || elDesc.cls
		btn.style.backgroundImage = "url('"+ libDir +"/"+ elDesc.dir +"/"+ elDesc.img + "')"
		var team = ElemsDesc[key].teams[0]
		if(team==="hero") heroesBtnsTr.appendChild(btn)
		else if(team==="enemy") enemiesBtnsTr.appendChild(btn)
		else if(team==="item") itemsBtnsTr.appendChild(btn)
		btn.onclick = selectThisDrawButton
	}
	// tools button
	Q("#btn_draw_rm").onclick = selectThisDrawButton
}
/*
	var btnDiv = Q("#page_draw .buttons")
	for(var lineDesc of DrawButtonsDesc){
		var div = document.createElement("div")
		btnDiv.appendChild(div)
		for(var btnDesc of lineDesc){
			var button = document.createElement("button")
			div.appendChild(button)
			button.desc = btnDesc
			button.title = btnDesc.key
			// wall
			if(btnDesc.type === WALL){
				var wallDesc = WallsDesc[btnDesc.key]
				button.style.background = wallDesc.color
			}
			// elem
			if(btnDesc.type === ELEM){
				var elDesc = ElemsDesc[btnDesc.key]
				button.title = elDesc.title
				button.style.backgroundImage = "url('"+ libDir +"/"+ elDesc.dir +"/"+ elDesc.img + "')"
			}
			// default selection
			if(btnDesc.type === WALL && btnDesc.key === "solid")
				selectDrawButton(button)
			// onclick
			button.onclick = function(){
				selectDrawButton(this)
			}
		}
	}
}
*/
var SelectedDrawButton = null
var selectDrawButton = function(button){
	if(SelectedDrawButton)
		SelectedDrawButton.classList.remove("selected")
	SelectedDrawButton = button
	SelectedDrawButton.classList.add("selected")
}
var selectThisDrawButton = function(){
	selectDrawButton(this)
}

var initDrawCan = function(){
	var can = Ctx.drawCan
	if(can) return can
	var can = Q("#page_draw .canvas canvas")
	if(can){
		Ctx.drawCan = can
		return can
	}
	// create canvas
	var can = document.createElement("canvas")
	var desc = Ctx.desc
	can.width = desc ? desc.width : defWidth
	can.height = desc ? desc.height : defHeight
	// border
	can.style.border = "1px solid black"
	// fill white
	var ctx = can.getContext("2d")
	ctx.fillStyle="white"
	ctx.fillRect(0,0,can.width,can.height)
	// draw walls
	if(desc && desc.walls)
		MSG.drawWalls(can, desc.walls, {fill:"black"})
	// insert in draw page
	var canDiv = Q("#page_draw .canvas")
	canDiv.innerHTML = ""
	canDiv.appendChild(can)
	// add elems
	if(desc && desc.elems){
		for(var el of desc.elems)
			drawCanAddElem(el.key, el.x, el.y)
	}
	// add to Ctx
	Ctx.drawCan = can
	return can
}

var initLoadingCan = function(drawCan){
	var can = Ctx.loadingCan
	if(can) return can
	// create canvas
	var drawCan = initDrawCan()
	var can = document.createElement("canvas")
	can.width = drawCan.width
	can.height = drawCan.height
	// fill with drawCan
	var ctx = can.getContext("2d")
	ctx.drawImage(drawCan, 0, 0)
	// add elems
	var elems = Ctx.desc && Ctx.desc.elems
	if(elems){
		for(var el of elems){
			var elDesc = ElemsDesc[el.key]
			var elImg = initElemImg(el.key)
			ctx.drawImage(elImg,
				el.x-elDesc.width/2, el.y-elDesc.height/2,
				elDesc.width, elDesc.height)
		}
	}
	// add grey fade
	ctx.fillStyle = "black"
	ctx.globalAlpha = 0.1
	ctx.fillRect(0, 0, can.width, can.height)
	// add text
	ctx.globalAlpha = 1
	ctx.font = "30px Arial"
	var txt = "Animating..."
	ctx.fillText(txt,
		(can.width-ctx.measureText(txt).width)/2,
		(can.height-30)/2)
	// add to Ctx
	Ctx.loadingCan = can
	return can
}

var clearDrawCan = function(){
	var can = Q("#page_draw canvas")
	// fill white
	var ctx = can.getContext("2d")
	ctx.fillStyle="white"
	ctx.fillRect(0,0,can.width,can.height)
	// remove all elems
	var elems = Qall(".elem")
	for(var i=0, len=elems.length; i<len; ++i)
		elems[i].remove()
	// clear Context
	clearCtx()
	// clear url
	window.location.hash = ""
}

var showDrawPage = function(){
	var drawCan = initDrawCan()

	// init listerners (if necessary)
	if(!drawCan.hasDrawListeners){
		drawCan.hasDrawListeners = true

		var drawCtx = drawCan.getContext("2d")

		var _drawingWall=false
		var _prevX=null
		var _prevY=null

		var getMouseX = evt => (evt.layerX-evt.target.offsetLeft)
		var getMouseY = evt => (evt.layerY-evt.target.offsetTop)

		drawCan.onmousedown = function(evt){
			if(SelectedDrawButton.desc.type === WALL){
				_drawingWall=true
				drawLine(getMouseX(evt), getMouseY(evt))
			}
		}
		drawCan.onmousemove = function(evt) {
			if(_drawingWall){
				drawLine(getMouseX(evt), getMouseY(evt))
				// make current game obsolete
				clearCtx()
			}
		}
		document.body.onmouseup = function(){
			_drawingWall=false
			_prevX=null
			_prevY=null
		}
		drawCan.onmouseup = function(evt){
			if(SelectedDrawButton){
				var btnDesc = SelectedDrawButton.desc
				if(btnDesc.type === ELEM){
					drawCanAddElem(btnDesc.key, getMouseX(evt), getMouseY(evt))
					// make current game obsolete
					clearCtx()
				}
			}
		}
		var drawLine = function(x, y){
			if(_prevX!==null && _prevY!==null) {
				var key = SelectedDrawButton.desc.key,
					desc = WallsDesc[key],
					color = desc.color
				drawCtx.strokeStyle = color
				drawCtx.lineWidth=15
				drawCtx.lineCap='round'
				drawCtx.beginPath()
				drawCtx.moveTo(_prevX,_prevY)
				drawCtx.lineTo(x,y)
				drawCtx.stroke()
			}
			_prevX=x
			_prevY=y
		}
	}

	showPage("draw")
	drawCan.focus()
}

var drawCanAddElem = function(elKey, elX, elY){
	var elDesc = ElemsDesc[elKey]
	var elem = initElemImg(elKey).cloneNode()
	elem.classList.add("elem")
	elem._key = elKey
	elem._x = elX
	elem.style.left = Math.floor(elX-elDesc.width/2) +"px"
	elem._y = elY
	elem.style.top = Math.floor(elY-elDesc.height/2) +"px"
	if(elDesc.teams[0]==="hero"){
		var prevHero = Q("#page_draw #hero")
		if(prevHero) prevHero.remove()
		elem.id = "hero"
	}
	elem.onclick = drawElemOnClick
	Q("#page_draw .canvas").appendChild(elem)
}

var initElemImg = function(elKey){
	var elDesc = ElemsDesc[elKey]
	if(elDesc.imgEl) return elDesc.imgEl
	var imgEl = elDesc.imgEl = document.createElement("img")
	imgEl.style.width = elDesc.width +"px"
	imgEl.style.height = elDesc.height +"px"
	imgEl.src = libDir +'/'+ elDesc.dir +"/"+ elDesc.img
	return imgEl
}

var drawElemOnClick = function(){
	if(SelectedDrawButton.id === "btn_draw_rm")
		this.remove()
}

// Play ///////////////////////////////

var showPlayPage = function(){

	if(!Ctx.game){
		createGameCanvas()
		showPage("play")
		setTimeout(() => createGame(_showPlayPage2))
	} else {
		showPage("play")
		_showPlayPage2()
	}
}
var _showPlayPage2 = function(){
	var canvas = Q("#page_play canvas")
	if(canvas) canvas.focus()
}

var createGameCanvas = function(){
	initCtxFromDrawQuick()
	var gameDiv = Q("#page_play .canvas")
	gameDiv.innerHTML = ""
	var gameCan = document.createElement("canvas")
	gameCan.width = Ctx.desc.width
	gameCan.height = Ctx.desc.height
	gameDiv.appendChild(gameCan)
	var loadingCan = initLoadingCan()
	gameCan.getContext("2d").drawImage(loadingCan,0,0)
}

var createGame = function(next){

	var nbLoad = 2
	var onLoad = () => {
		if(--nbLoad===0){
			_createGame()
			next()
		}
	}

	// import elems scripts
	initCtxFromDrawQuick()
	var elems = Ctx.desc.elems || []
	importElemsScripts(elems, onLoad)

	// init full ctx
	initCtxFromDraw()
	onLoad()
}

var _createGame = function(){

	var drawCan = initDrawCan()
	var loadingCan = initLoadingCan()

	// create game
	var gameCan = Q("#page_play canvas")
	var game = Ctx.game = new MSG.Game(gameCan)
		.act("start", function(){ this.canvas.focus() })
		.act("blur", function(){ var scn=this.mainScene; if(scn) scn.tryPause() })

	// walls mapCollider
	var walls = Ctx.desc.walls || []
	var wallsMapCollider = new MSG.MapCollider(walls, {
		rebounce: false,
		friction: true,
		updASpd: false
	})

	// scene
	var elems = Ctx.desc.elems || []
	game.Scene = class extends MSG.Scene {
		constructor(game){
			super(game)
			this.sprite = drawCan
			for(var el of elems)
				addElem(el, wallsMapCollider, this)
			this.tryPause = SceneTryPause
			this.act({keydown:"Space"}, SceneTryPause)
				.act("start", function(){ if(!this.game.hasFocus()) this.tryPause() })
				.act("victory", victoryGame)
		}
	}
	game.mainScene = new game.Scene(game)

	// loading scene
	game.LoadingScene = class extends MSG.Scene {
		constructor(game){
			super(game)
			this.sprite = loadingCan
		}
	}

	// buttons
	Q("#btn_restart").onclick = restartGame
}

var importElemsScripts = function(elems, next){
	var nbLoad = 1
	var onLoad =  () => {
		if(--nbLoad === 0)
			next()
	}
	for(var el of elems){
		var desc = ElemsDesc[el.key] 
		if(!desc.imported){
			desc.imported = true
			nbLoad++
			importScript(libDir+'/'+desc.dir+'/'+desc.src, onLoad)
		}
	}
	onLoad()
}

var addElem = function(el, mapCollider, scene) {
	var desc = ElemsDesc[el.key]
	// create elem
	var elem = new MSG[desc.cls](scene, {x:el.x, y:el.y})
	elem.teams = desc.teams
	if(desc.teams[0] === "hero"){
		elem.act("remove", failGame)
			.act("damaged", failGame)
			.add(HeroCatchItemAction)
	}
	if(desc.teams[0]==="enemy"){
		elem.targets = ["hero"]
	}
	if(desc.collideWalls)
		elem.add(mapCollider)
	scene.preload(elem)
	return elem
}

var PauseScene = class extends MSG.MenuScene {
	constructor(scene){
		super(scene.game, { color:"grey", title:"PAUSE", text:"Click to continue"})
		this.tgtScene = scene
		this.act("click", PauseSceneUnpause)
		this.act({keydown:"Space"}, PauseSceneUnpause)
	}
}
var PauseSceneUnpause = function(){
	this.tgtScene.pause(false)
	this.remove()
}
var SceneTryPause = function(){
	if(!this.paused){
		this.pause()
		new PauseScene(this)
	}
} 

var FailScene = class extends MSG.MenuScene {
	constructor(game){
		super(game, { color:"red", title:"You died !", text:"Click to restart"})
		this.act("click", restartGame)
	}
}

var failGame = function(){
	var game = Ctx.game
	if(game){
		game.pause()
		new FailScene(Ctx.game)
	}
}

var VictoryScene = class extends MSG.MenuScene {
	constructor(game){
		super(game, { color:"blue", title:"Victory !", text:"Click to restart"})
		this.act("click", restartGame)
	}
}

var victoryGame = function(){
	var game = Ctx.game
	if(game){
		game.pause()
		new VictoryScene(Ctx.game)
	}
}

var restartGame = function(){
	var game = Ctx.game
	if(game){
		game.clear()
		game.canvas.focus()
		game.mainScene = new game.Scene(game)
	}
}

var HeroCatchItemAction = new MSG.Action(function(){
	checkCollision(this, "item", HeroCatchItem)
})
var HeroCatchItem = function(self, el){
	el.trigger("catched", self)
}


// Share ///////////////////////////////

var showSharePage = function(){

	initCtxUrlHash()

	var urlInput = Q("#page_share .url")
	urlInput.innerHTML = window.location.href

	showPage("share")
	urlInput.select()
	document.execCommand("Copy")
}


// DOM ///////////////////////////////

var showPage = function(key){
	Qall(".tab").forEach(tab => tab.classList.remove("selected"))
	Qall(".page").forEach(page => page.style.display = "none")
	Q("#tab_"+key).classList.add("selected")
	Q("#page_"+key).style.display = null
}

var Q = function(q){
	return document.body.querySelector(q)
}
var Qall = function(q){
	return document.body.querySelectorAll(q)
}

var createWhiteCanvas = function(width, height){
	var can = document.createElement("canvas")
	can.width = width
	can.height = height
	var ctx = can.getContext("2d")
	ctx.fillStyle="white"
	ctx.fillRect(0,0,width,height)
	return can
}


// format & parse ///////////////////////////////

var formatGame = function(desc){
	var obj = exportGame(desc)
	var json = JSON.stringify(obj)
	var json2 = json.replace(/"/g, '')
					.replace(/:/g, '=').replace(/,/g, '&')
					.replace(/\[/g, '(').replace(/\]/g, ')')
					.replace(/{/g, '(*').replace(/}/g, '*)')
	return "v=1&g="+json2
}

var exportGame = function(desc){
	var out = {}
	out.w = desc.width
	out.h = desc.height
	var maps = out.maps = {}
	maps[SOLID] = exportWalls(desc.walls, desc.width)
	out.elems = exportElems(desc.elems, desc.width)
	return out
}

var exportWalls = function(walls, width){
	var out = []
	if(!walls) return out
	var toN = (x, y) => x + (y*width)
	var prevX=null, prevY=null
	for(var w=0, len=walls.length; w<len; ++w) {
		var wall=walls[w],
			x1=wall.x1, y1=wall.y1,
			x2=wall.x2, y2=wall.y2
		if(x1!==prevX || y1!==prevY){
			if(prevX!==null) out.push('_')
			out.push(toN(x1, y1))
		}
		out.push(toN(x2, y2))
		prevX=x2; prevY=y2
	}
	return out
}

var exportElems = function(elems, width){
	var out = {}
	if(!elems) return out
	var toN = (x, y) => x + (y*width)
	for(var el of elems){
		var key = el.key
		var keyElems = out[key]
		if(!keyElems) keyElems = out[key] = []
		keyElems.push(toN(el.x, el.y))
	}
	return out
}

var parseGameFromUrl = function(){
	var urlHash = window.location.hash
	if(urlHash.length<=1) return null
	return parseGame(urlHash.substr(1))
}

var parseGame = function(urlHash){
	// determine version
	var gameIdx=urlHash.indexOf("&")
	var versionStr=(gameIdx==-1) ? urlHash : urlHash.substr(0, gameIdx),
		versionArr=versionStr.split('=')
	if(versionArr.length!=2 || versionArr[0]!='v') return null
	version=versionArr[1]
	// call matching parser
	var gameUrl=null
	if(version==="1") gameUrl=parseGame_v1(urlHash)
	if(gameUrl===null) return null
	// import
	return importGame(urlHash, gameUrl)
}

var parseGame_v1 = function(urlHash){
	var json = urlHash.replace(/\(\*/g, '{').replace(/\*\)/g, '}')
					.replace(/\(/g, '[').replace(/\)/g, ']')
					.replace(/=/g, ':').replace(/&/g, ',')
					.replace(/([a-zA-Z_]+)/g, '"$1"')
	json = '{'+json+'}'
	return JSON.parse(json).g
}

var importGame = function(urlHash, gameUrl){
	return {
		urlHash: urlHash,
		desc: {
			width: gameUrl.w,
			height: gameUrl.h,
			walls: importWalls(gameUrl.maps[SOLID], gameUrl.w),
			elems: importElems(gameUrl.elems, gameUrl.w)
		}
	}
}

var importWalls = function(wallsUrl, width){
	var res=[], prevX=null, prevY=null
	for(var i=0, len=wallsUrl.length; i<len; ++i){
		var n=wallsUrl[i]
		if(n==='_') {
			prevX=null; prevY=null
		} else {
			var x=n%width, y=(n-x)/width
			if(prevX!==null){
				var wall = new MSG.Wall(prevX, prevY, x, y)
				res.push(wall)
			}
			prevX=x; prevY=y
		}
	}
	return res
}

var importElems = function(elemsUrl, width){
	var res=[]
	if(!elemsUrl) return res
	for(var key in elemsUrl){
		keyElems = elemsUrl[key]
		for(var el of keyElems){
			var n=el
			var x=n%width, y=(n-x)/width
			res.push({key:key, x:x, y:y})
		}
	}
	return res
}


// various ///////////////////////////////

var importScript = function(src, next) {
		var dom = document.createElement("script")
		dom.type = "application/javascript"
		dom.src = src
		dom.onload = next
		dom.onerror = next
		document.head.appendChild(dom)
}

// imports ///////////////////////////////

var atan2=Math.atan2,
	PI=Math.PI, PI_2=2*PI

var checkCollision = MSG.checkCollision

main()
</script>
</html>
